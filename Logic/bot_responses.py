def new_cargo_response(from_location, to_location, distance, weight, volume, comments, payment):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ volume —Å–∏–º–≤–æ–ª "/", –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ volume - —ç—Ç–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ
    if '/' in str(volume):
        volume_str = f"<b>–û–±—ä—ë–º, –º3:</b> {volume}"
        dimensions = volume.split("/")
        dimensions_str = f"<b>–îx–®x–í,–º:</b> {' x '.join(dimensions)}"
    else:
        volume_str = "<b>–û–±—ä—ë–º, –º3:</b> –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        dimensions_str = "<b>–îx–®x–í,–º:</b> –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

    new_cargo_str = f"üì¶ <b>–î–ê–ù–ù–´–ï –û –ì–†–£–ó–ï:</b>\n" \
                    f"üÖ∞Ô∏è <b>–ó–ê–ì–†–£–ó–ö–ê:</b> {from_location}\n" \
                    "‚¨áÔ∏è\n" \
                    f"‚¨áÔ∏è {distance} km\n" \
                    "‚¨áÔ∏è\n" \
                    f"üÖ±Ô∏è <b>–†–ê–ó–ì–†–£–ó–ö–ê:</b> {to_location}\n\n" \
                    f"<b>–í–µ—Å, —Ç:</b> {weight}\n" \
                    f"{volume_str}\n" \
                    f"{dimensions_str}\n\n" \
                    f"{comments}\n\n" \
                    f"üíµ <b>–°–¢–ê–í–ö–ê ‚ÇΩ:</b> {payment}\n\n" \
                    f"üìû <b>–î–ò–°–ü–ï–¢–ß–ï–†:</b> @Safron195"
    return new_cargo_str




def user_data_response(raw_user_data):
    if "role" in raw_user_data:
        user_data_str = "üìÅ <b>–ú–û–ò –î–ê–ù–ù–´–ï:</b>\n\n" \
                        "üë§ <b>–õ–ò–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>\n\n" \
                        f"<b>–§–ò–û:</b> {raw_user_data['fullname']}\n" \
                        f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {raw_user_data['phone']}\n" \
                        f"<b>–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {raw_user_data['city']}\n" \
                        f"<b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:</b> {raw_user_data['legalstatus']}\n\n" \
                        f"üöó <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–°:</b>\n\n" \
                        f"<b>–ì–æ—Å.–∑–Ω–∞–∫:</b> {raw_user_data['sign']}\n" \
                        f"<b>–ì—Ä—É–∑–æ–ø–æ–¥—å–µ–º–Ω–æ—Å—Ç—å:</b> {raw_user_data['payload']} —Ç–æ–Ω–Ω—ã\n" \
                        f"<b>–û–±—ä–µ–º:</b> {raw_user_data['dimensions']}\n" \
                        f"<b>–¢–∏–ø –∫—É–∑–æ–≤–∞:</b> {raw_user_data['bodytype']}\n" \
                        f"<b>–¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:</b> {raw_user_data['loadtype']}\n" \
                        f"<b>–í–ª–∞–¥–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º:</b> {raw_user_data['carownership']}\n\n" \
                        f"‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–§–ò–õ–Ø:</b>\n\n" \
                        f"<b>–ö–æ–¥ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:</b> {raw_user_data['broker_id']}\n"\
                        f"<b>–†–æ–ª—å:</b> {raw_user_data['role']}\n" \
                        f"<b>–î–∏—Å—Ç–∞–Ω—Ü–∏—è:</b> {raw_user_data['distance']} –∫–º\n"
        return user_data_str
    else:
        return {}


def broker_data_response(broker_data):
    broker_data_str = "üìû <b>–ú–û–ô –î–ò–°–ü–ï–¢–ß–ï–†:</b>\n\n" \
                      "üë§ –õ–ò–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n\n" \
                      f"–§–ò–û: {broker_data['fullname']}\n" \
                      f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {broker_data['phone']}\n\n" \
                      f"Telegram:{broker_data['telegram']}\n\n" \
                      "‚ùóÔ∏è–ü–û –î–†–£–ì–ò–ú –í–û–ü–†–û–°–ê–ú\n" \
                      "—Ç–æ–ª—å–∫–æ –∑–≤–æ–Ω–∏—Ç—å: +79518400535 –ü–∞–≤–µ–ª"
    return broker_data_str
