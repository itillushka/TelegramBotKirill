from telebot import types

import add_data
import dialog
import user_dict
import user_utils


def start(message, bot):
    markup = types.InlineKeyboardMarkup(row_width=1)
    broker_button = types.InlineKeyboardButton(" üöö –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º", callback_data="driver")
    driver_button = types.InlineKeyboardButton(" üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º", callback_data="broker")
    cargo_button = types.InlineKeyboardButton(" üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–∑", callback_data="cargo")
    community_button = types.InlineKeyboardButton(" üë• –°–æ–æ–±—â–µ—Å—Ç–≤–æ", url="https://t.me/+j7plDmEkx9wyN2Iy")
    markup.add(broker_button, driver_button, cargo_button, community_button)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)


def start_driver(call, bot):
    user_id = call.from_user.id
    status = call.data
    if status == "start_driver":
        user_dict.user_data[user_id] = {"role": "–í–æ–¥–∏—Ç–µ–ª—å"}
        user_dict.driver_data[user_id] = {}  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        bot.send_message(user_id, "–í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è?")
        bot.register_next_step_handler(call.message, dialog.ask_phone, bot)


def handle_broker_role(call, bot):
    user_id = call.from_user.id
    bot.send_message(user_id,
                     "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤!\n–ü—Ä–æ—à—É –≤–∞—Å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ì—É–≥–ª —Ñ–æ—Ä–º—É, "
                     "—á—Ç–æ–±—ã –º—ã —É–∑–Ω–∞–ª–∏ –æ –≤–∞—Å –ø–æ–±–æ–ª—å—à–µ!")
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç Google
    markup = types.InlineKeyboardMarkup(row_width=1)
    google_button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ì—É–≥–ª —Ñ–æ—Ä–º–µ", url="https://forms.gle/rDtNM8sN8JRiaJpp6")
    markup.add(google_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    bot.send_message(user_id, "–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:", reply_markup=markup)


def handle_driver_role(call, bot):
    user_id = call.from_user.id
    registered, user_role = user_utils.is_user_registered(user_id)

    if registered and user_role == "–í–æ–¥–∏—Ç–µ–ª—å":
        markup = types.InlineKeyboardMarkup(row_width=1)
        my_data_button = types.InlineKeyboardButton("–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my_data")
        view_cargo_button = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–∑—ã", callback_data="view_cargo")
        view_broker_button = types.InlineKeyboardButton("–ú–æ–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä", callback_data="view_broker")
        view_history_button = types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="view_history")
        markup.add(my_data_button, view_cargo_button, view_broker_button, view_history_button)
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è", reply_markup=markup)
    elif registered and user_role == "–ë—Ä–æ–∫–µ—Ä":
        bot.send_message(user_id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ–ª–∏ –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞.")
    elif not registered:
        start_button = types.InlineKeyboardButton("üü¢ –ù–∞—á–∞—Ç—å", callback_data="start_driver")
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(start_button)
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –Ω–æ–≤—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π!", reply_markup=markup)


def handle_driver_choice(call, bot):
    user_id = call.from_user.id
    choice = call.data

    if choice == "my_data":
        user_data_get = user_utils.get_displayed_user_data(user_utils.get_user_data(user_id))
        if user_data_get:
            response = "üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            for key, value in user_data_get.items():
                response += f"‚úÖ {key.capitalize()}: {value}\n"
            bot.send_message(user_id, response)
        else:
            bot.send_message(user_id, "üö´ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    elif choice == "view_cargo":
        user_data = user_utils.get_user_data(user_id)
        if user_data and user_data["role"] == "–í–æ–¥–∏—Ç–µ–ª—å":
            residence_city = user_data["city"]  # –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
            cargo_type = user_data["loadtype"]  # –¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è

            sheet = user_utils.client.open_by_key(user_utils.SPREADSHEET_ID_CARGO_DATA).get_worksheet(0)

            cargo_buttons = []
            cargo_data = sheet.get_all_values()[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

            for row in cargo_data:
                from_location = row[1]
                cargo_row_type = row[5]  # –¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                if from_location == residence_city and cargo_row_type == cargo_type:
                    cargo_id = row[0]
                    to_location = row[2]
                    cargo_buttons.append(types.InlineKeyboardButton(f"–ì—Ä—É–∑: {from_location} -> {to_location}",
                                                                    callback_data=f"cargo_{cargo_id}"))

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤
            finish_button = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ‚úÖ", callback_data="finish")
            cargo_buttons.append(finish_button)

            cargo_buttons_markup = types.InlineKeyboardMarkup(row_width=1)
            cargo_buttons_markup.add(*cargo_buttons)

            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–∑:", reply_markup=cargo_buttons_markup)
        else:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–∑–æ–≤.")
    elif choice == "view_broker":
        user_data = user_utils.get_user_data(user_id)
        if user_data and user_data["role"] == "–í–æ–¥–∏—Ç–µ–ª—å":
            broker_id = user_data["broker_id"]  # –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è
            if broker_id:
                broker_data = user_utils.get_broker_data(broker_id)
                if broker_data:
                    phone_buttons_markup = types.InlineKeyboardMarkup(row_width=1)
                    phone_button = types.InlineKeyboardButton(f"–ü–æ–∑–≤–æ–Ω–∏—Ç—å: +{broker_data['phone']}",
                                                              url=f"http://onmap.uz/tel/{broker_data['phone']}")
                    phone_buttons_markup.add(phone_button)
                    response = f"–î–∞–Ω–Ω—ã–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:" \
                               f"\n\n–§–ò–û: {broker_data['fullname']}\n" \
                               f"–¢–µ–ª–µ—Ñ–æ–Ω: {broker_data['phone']}\n" \
                               f"Telegram: {broker_data['telegram']}"
                    bot.send_message(user_id, response, reply_markup=phone_buttons_markup)
                else:
                    bot.send_message(user_id, "–î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫ –≤–∞–º –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        else:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.")


def handle_cargo_choice(call, bot):
    user_id = call.from_user.id
    cargo_id = call.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–∑–∞ –∏–∑ callback_data

    if user_id not in user_dict.chosen_cargo:
        user_dict.chosen_cargo[user_id] = []

    if cargo_id == "finish":
        handle_finish(call, bot)
    elif cargo_id not in user_dict.chosen_cargo[user_id]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –≥—Ä—É–∑ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        cargo_already_chosen = cargo_id in user_dict.chosen_cargo[user_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±–∏—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –≥—Ä—É–∑ —Ä–∞–Ω–µ–µ
        cargo_already_selected = user_utils.check_if_cargo_already_selected(user_id, cargo_id)

        if not cargo_already_chosen and not cargo_already_selected:
            user_dict.chosen_cargo[user_id].append(cargo_id)
            bot.answer_callback_query(call.id, text="–ì—Ä—É–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ! ‚úÖ")
        elif cargo_already_chosen:
            bot.answer_callback_query(call.id, text="–≠—Ç–æ—Ç –≥—Ä—É–∑ —É–∂–µ –≤—ã–±—Ä–∞–Ω –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏! ‚ùå")
        elif cargo_already_selected:
            bot.answer_callback_query(call.id, text="–≠—Ç–æ—Ç –≥—Ä—É–∑ —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Ä–∞–Ω–µ–µ! ‚ùå")




def handle_finish(call, bot):
    user_id = call.from_user.id
    if user_id in user_dict.chosen_cargo and user_dict.chosen_cargo[user_id]:
        chosen_cargo_ids = user_dict.chosen_cargo[user_id]  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≥—Ä—É–∑–æ–≤

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ç–æ–ª–±–µ—Ü "–ì—Ä—É–∑ –∏ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞"
        add_data.add_chosen_cargo(user_id, chosen_cargo_ids)

        user_dict.chosen_cargo[user_id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
        bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. üöö")
    else:
        bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–∑—ã. üö´")



def handle_cargo(call, bot):
    user_id = call.from_user.id
    user_dict.user_data[user_id] = {}
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ.\n\n1. –û—Ç–∫—É–¥–∞?")

    bot.register_next_step_handler(call.message, dialog.ask_cargo_from, bot)


def handle_history(call, bot):
    user_id = call.from_user.id
    user_data = user_utils.get_user_data(user_id)

    if user_data and user_data["role"] == "–í–æ–¥–∏—Ç–µ–ª—å":
        history_data = user_utils.get_cargo_history(user_id)
        if history_data:
            markup = types.InlineKeyboardMarkup(row_width=1)
            cargo_buttons = []

            for cargo_id in history_data.items():
                cargo_button = types.InlineKeyboardButton(
                    f"–ó–∞–∫–∞–∑ {cargo_id} - –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"history_{cargo_id}"
                )
                cargo_buttons.append(cargo_button)

            markup.add(*cargo_buttons)
            bot.send_message(user_id, "üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:", reply_markup=markup)
        else:
            bot.send_message(user_id, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞.")
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")


def handle_history_details(call, bot):
    user_id = call.from_user.id
    cargo_id = call.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–∑–∞ –∏–∑ callback_data
    cargo_details = user_utils.get_cargo_details(cargo_id)
    cargo_history_status = user_utils.get_cargo_history_status(cargo_id)

    if cargo_details and cargo_history_status:
        response = f"üì¶ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ {cargo_id}:\n\n"
        response += f"–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏: {cargo_details['from_location']}\n"
        response += f"–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {cargo_details['to_location']}\n"
        response += f"–°—Ç–∞—Ç—É—Å: {cargo_history_status}\n"
        response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {cargo_details['description']}\n"
        bot.send_message(user_id, response)
    else:
        bot.send_message(user_id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ {cargo_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
