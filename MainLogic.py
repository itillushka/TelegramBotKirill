import telebot
import openpyxl
from telebot import types

TOKEN = '6633230318:AAEPmoWn2SgZsenyflbzZEP2hJ_Fgg6-diM'
broker_password = "1234"
bot = telebot.TeleBot(TOKEN)
DATA = "Data/user_data.xlsx"
CARGO = "Data/cargo_data.xlsx"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_data = {}
waiting_for_password = {}
chosen_cargo = {}


def is_user_registered(user_id):
    workbook = openpyxl.load_workbook(DATA)
    sheet = workbook.active
    for row in sheet.iter_rows(min_row=1, values_only=True):
        print(row)
        if row[0] == user_id:
            workbook.close()
            return True
    workbook.close()
    return False
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start', 'menu'])
def start(message):

    markup = types.InlineKeyboardMarkup(row_width=1)
    broker_button = types.InlineKeyboardButton("[üöö –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º]",callback_data="driver")
    driver_button = types.InlineKeyboardButton("[ üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º]",callback_data="broker")
    cargo_button = types.InlineKeyboardButton("[ üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–∑]",callback_data="cargo")
    markup.add(broker_button, driver_button, cargo_button)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["broker", "driver"])
def handle_role_choice(call):
    user_id = call.from_user.id
    role = call.data
    markup = types.InlineKeyboardMarkup(row_width=1)

    if is_user_registered(user_id):

        my_data_button = types.InlineKeyboardButton("–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my_data")
        view_cargo_button = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–∑—ã", callback_data="view_cargo")
        markup.add(my_data_button, view_cargo_button)

        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è", reply_markup=markup)
        return

    if role == "broker":
        user_data[user_id] = {"role": "–ë—Ä–æ–∫–µ—Ä"}
        waiting_for_password[user_id] = True
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ–ª–∏ –±—Ä–æ–∫–µ—Ä–∞:")
    elif role == "driver":
        start_button = types.InlineKeyboardButton("[üü¢ –ù–∞—á–∞—Ç—å ]", callback_data="start_driver")
        markup.add(start_button)
        bot.send_message(user_id,"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –Ω–æ–≤—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π!",reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["start_driver"])
def start_driver(call):
    user_id = call.from_user.id
    status = call.data
    if status == "start_driver":
        user_data[user_id] = {"role": "–í–æ–¥–∏—Ç–µ–ª—å"}
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        bot.send_message(user_id, "–í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è?")
        bot.register_next_step_handler(call.message, ask_age)

@bot.callback_query_handler(func=lambda call: call.data in ["my_data", "view_cargo"])
def handle_driver_choice(call):
    user_id = call.from_user.id
    choice = call.data

    if choice == "my_data":
        bot.send_message(user_id, "–î–∞–Ω–Ω—ã–µ")
    elif choice == "view_cargo":
        cargo_workbook = openpyxl.load_workbook(CARGO)
        cargo_sheet = cargo_workbook.active

        cargo_buttons = []
        for row in cargo_sheet.iter_rows(min_row=2, values_only=True):
            from_location = row[0]
            to_location = row[1]
            distance = row[2]
            weight = row[3]
            payment = row[4]

            cargo_info = f"–û—Ç–∫—É–¥–∞: {from_location}\n–ö—É–¥–∞: {to_location}\n–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance} –∫–º\n" \
                         f"–í–µ—Å: {weight} –∫–≥\n–û–ø–ª–∞—Ç–∞: {payment}"

            cargo_buttons.append(types.InlineKeyboardButton(f"–ì—Ä—É–∑: {from_location} -> {to_location}",
                                                            callback_data=f"cargo_{from_location}_{to_location}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤
        finish_button = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ‚úÖ", callback_data="finish")
        cargo_buttons.append(finish_button)

        cargo_buttons_markup = types.InlineKeyboardMarkup(row_width=1)
        cargo_buttons_markup.add(*cargo_buttons)

        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–∑:", reply_markup=cargo_buttons_markup)



@bot.callback_query_handler(func=lambda call: call.data.startswith("cargo_"))
def handle_cargo_choice(call):
    user_id = call.from_user.id
    cargo_data = call.data.split("_")[1:]  # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ –∏–∑ callback_data
    cargo_key = "_".join(cargo_data)  # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –≥—Ä—É–∑–∞

    if user_id not in chosen_cargo:
        chosen_cargo[user_id] = []

    if cargo_key == "finish":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–∑–æ–≤
        if user_id in chosen_cargo and chosen_cargo[user_id]:
            chosen_cargo_rows = chosen_cargo[user_id]

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ç–æ–ª–±–µ—Ü "–ì—Ä—É–∑ –∏ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞"
            for cargo_row in chosen_cargo_rows:
                add_chosen_cargo(user_id, cargo_row)

            chosen_cargo[user_id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
        else:
            bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–∑—ã.")
    else:
        # –ò–Ω–∞—á–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥—Ä—É–∑
        chosen_cargo[user_id].append(cargo_key)
        bot.answer_callback_query(call.id, text="–ì—Ä—É–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ!")



@bot.callback_query_handler(func=lambda call: call.data == "finish")
def handle_finish(call):
    user_id = call.from_user.id
    if user_id in chosen_cargo and chosen_cargo[user_id]:
        chosen_cargo_rows = chosen_cargo[user_id]

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ç–æ–ª–±–µ—Ü "–ì—Ä—É–∑ –∏ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞"
        for cargo_row in chosen_cargo_rows:
            add_chosen_cargo(user_id, cargo_row)

        chosen_cargo[user_id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
        bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
    else:
        bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–∑—ã.")

def add_chosen_cargo(user_id, cargo_row):
    workbook = openpyxl.load_workbook(DATA)
    sheet = workbook.active

    # –ù–∞–π–¥–µ–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ user_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    for idx, row in enumerate(sheet.iter_rows(min_row=2, values_only=True), start=2):
        if row[0] == user_id:
            user_row = idx  # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ

            # –ü–æ–ª—É—á–∏–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
            last_column = sheet.max_column

            # –ó–∞–ø–∏—à–µ–º –≥—Ä—É–∑ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü
            sheet.cell(row=user_row, column=last_column + 1, value=cargo_row)
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É

    workbook.save(DATA)
    workbook.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
@bot.message_handler(func=lambda message: waiting_for_password.get(message.from_user.id))
def check_broker_password(message):
    user_id = message.from_user.id
    password = message.text

    if password == broker_password:
        add_to_excel(user_id, **user_data[user_id])
        bot.send_message(user_id, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –¢–µ–ø–µ—Ä—å –≤—ã –±—Ä–æ–∫–µ—Ä.")
        waiting_for_password[user_id] = False

    else:
        bot.send_message(user_id, "–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ä–æ–ª—å.")

def ask_age(message):
    user_id = message.from_user.id
    user_data[user_id]["name"] = message.text

    bot.send_message(message.chat.id, "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?")
    bot.register_next_step_handler(message, ask_car)


def ask_car(message):
    user_id = message.from_user.id
    user_data[user_id]["age"] = message.text

    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è —É –≤–∞—Å –º–∞—à–∏–Ω–∞?")
    bot.register_next_step_handler(message, ask_city)


def ask_city(message):
    user_id = message.from_user.id
    user_data[user_id]["car"] = message.text

    bot.send_message(message.chat.id, "–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?")
    bot.register_next_step_handler(message, ask_distance)


def ask_distance(message):
    user_id = message.from_user.id
    user_data[user_id]["city"] = message.text

    bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≥–æ—Ç–æ–≤—ã –µ–∑–¥–∏—Ç—å? (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)")
    bot.register_next_step_handler(message, save_driver_info)


def save_driver_info(message):
    user_id = message.from_user.id
    user_data[user_id]["distance"] = message.text

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ Excel —Ç–∞–±–ª–∏—Ü—É
    add_to_excel(user_id, **user_data[user_id])

    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


def add_to_excel(user_id, **data):
    workbook = openpyxl.load_workbook(DATA)
    sheet = workbook.active

    sheet.append([user_id, data.get("role"), data.get("name"), data.get("age"), data.get("car"), data.get("city"),
                  data.get("distance")])
    workbook.save(DATA)
    workbook.close()


bot.polling()
