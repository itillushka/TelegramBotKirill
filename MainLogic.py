import telebot
from telebot import types
import gspread
from oauth2client.service_account import ServiceAccountCredentials

TOKEN = '6633230318:AAEPmoWn2SgZsenyflbzZEP2hJ_Fgg6-diM'
broker_password = "1234"
bot = telebot.TeleBot(TOKEN)
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É JSON —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º
JSON_PATH = 'credentials.json'

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name(JSON_PATH, scope)
client = gspread.authorize(creds)

# ID Google –¢–∞–±–ª–∏—Ü—ã (–≤–∑—è—Ç—å –∏–∑ URL)
SPREADSHEET_ID_USER_DATA = '1Ru0mMLA8L6GyTPjvrFXIZ-dGN6u_CaHVsZiHVJo9R6w'
SPREADSHEET_ID_CARGO_DATA = '1Eph_4O0fJzbAITj98-1aigGct9YPyizM7WZ7dCDC-Pw'

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_data = {}
waiting_for_password = {}
chosen_cargo = {}
driver_data = {}


def is_user_registered(user_id):
    sheet = client.open_by_key(SPREADSHEET_ID_USER_DATA).get_worksheet(0)
    user_ids = sheet.col_values(1)[1:]

    if str(user_id) in user_ids:
        user_row = user_ids.index(str(user_id)) + 2  # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å user_id, —É—á–∏—Ç—ã–≤–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        user_role = sheet.cell(user_row, 2).value  # –ó–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ —Å —Ä–æ–ª—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return True, user_role
    else:
        return False, None


def get_user_data(user_id):
    sheet = client.open_by_key(SPREADSHEET_ID_USER_DATA).get_worksheet(0)
    user_cell = sheet.find(str(user_id))
    if user_cell:
        user_row = user_cell.row
        user_data_row = sheet.row_values(user_row)
        user_data = {
            "role": user_data_row[1],
            "name": user_data_row[2],
            "phone": user_data_row[3],
            "car_plate": user_data_row[4],
            "cargo_capacity": user_data_row[5],
            "dimensions": user_data_row[6],
            "body_type": user_data_row[7],
            "city": user_data_row[8],
            "distance": user_data_row[9],
            "ip_or_self_employed": user_data_row[10],
            "rent_or_own_car": user_data_row[11],
            "cargo_loading_type": user_data_row[12]
        }
        return user_data
    else:
        return {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start', 'menu'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    broker_button = types.InlineKeyboardButton(" üöö –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º", callback_data="driver")
    driver_button = types.InlineKeyboardButton(" üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º", callback_data="broker")
    cargo_button = types.InlineKeyboardButton(" üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–∑", callback_data="cargo")
    markup.add(broker_button, driver_button, cargo_button)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "broker")
def handle_broker_role(call):
    user_id = call.from_user.id
    bot.send_message(user_id,
                     "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤!\n–ü—Ä–æ—à—É –≤–∞—Å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ì—É–≥–ª —Ñ–æ—Ä–º—É, —á—Ç–æ–±—ã –º—ã —É–∑–Ω–∞–ª–∏ –æ –≤–∞—Å –ø–æ–±–æ–ª—å—à–µ!")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç Google
    markup = types.InlineKeyboardMarkup(row_width=1)
    google_button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ì—É–≥–ª —Ñ–æ—Ä–º–µ", url="https://www.google.com")
    markup.add(google_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    bot.send_message(user_id, "–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "driver")
def handle_driver_role(call):
    user_id = call.from_user.id
    registered, user_role = is_user_registered(user_id)

    if registered and user_role == "–í–æ–¥–∏—Ç–µ–ª—å":
        markup = types.InlineKeyboardMarkup(row_width=1)
        my_data_button = types.InlineKeyboardButton("–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my_data")
        view_cargo_button = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–∑—ã", callback_data="view_cargo")
        markup.add(my_data_button, view_cargo_button)
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è", reply_markup=markup)
    elif registered and user_role == "–ë—Ä–æ–∫–µ—Ä":
        bot.send_message(user_id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ–ª–∏ –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞.")
    elif not registered:
        start_button = types.InlineKeyboardButton("[üü¢ –ù–∞—á–∞—Ç—å ]", callback_data="start_driver")
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(start_button)
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –Ω–æ–≤—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["start_driver"])
def start_driver(call):
    user_id = call.from_user.id
    status = call.data
    if status == "start_driver":
        user_data[user_id] = {"role": "–í–æ–¥–∏—Ç–µ–ª—å"}
        driver_data[user_id] = {}  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        bot.send_message(user_id, "–í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è?")
        bot.register_next_step_handler(call.message, ask_phone)


@bot.callback_query_handler(func=lambda call: call.data in ["my_data", "view_cargo"])
def handle_driver_choice(call):
    user_id = call.from_user.id
    choice = call.data

    if choice == "my_data":
        user_data = get_user_data(user_id)

        if user_data:
            response = "üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            for key, value in user_data.items():
                response += f"‚úÖ {key.capitalize()}: {value}\n"
            bot.send_message(user_id, response)
        else:
            bot.send_message(user_id, "üö´ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    elif choice == "view_cargo":
        sheet = client.open_by_key(SPREADSHEET_ID_CARGO_DATA).get_worksheet(0)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

        cargo_buttons = []
        cargo_data = sheet.get_all_values()[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

        for row in cargo_data:
            cargo_id = row[0]
            from_location = row[1]
            to_location = row[2]
            cargo_buttons.append(types.InlineKeyboardButton(f"–ì—Ä—É–∑: {from_location} -> {to_location}",
                                                            callback_data=f"cargo_{cargo_id}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤
        finish_button = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ‚úÖ", callback_data="finish")
        cargo_buttons.append(finish_button)

        cargo_buttons_markup = types.InlineKeyboardMarkup(row_width=1)
        cargo_buttons_markup.add(*cargo_buttons)

        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–∑:", reply_markup=cargo_buttons_markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("cargo_"))
def handle_cargo_choice(call):
    user_id = call.from_user.id
    cargo_id = call.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–∑–∞ –∏–∑ callback_data

    if user_id not in chosen_cargo:
        chosen_cargo[user_id] = []

    if cargo_id == "finish":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–∑–æ–≤
        if user_id in chosen_cargo and chosen_cargo[user_id]:
            chosen_cargo_rows = chosen_cargo[user_id]

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ç–æ–ª–±–µ—Ü "–ì—Ä—É–∑ –∏ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞"
            for cargo_row in chosen_cargo_rows:
                add_chosen_cargo(user_id, cargo_row)

            chosen_cargo[user_id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. üöö")
        else:
            bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–∑—ã. üö´")
    else:
        # –ò–Ω–∞—á–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥—Ä—É–∑
        chosen_cargo[user_id].append(cargo_id)
        bot.answer_callback_query(call.id, text="–ì—Ä—É–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ! ‚úÖ")


@bot.callback_query_handler(func=lambda call: call.data == "finish")
def handle_finish(call):
    user_id = call.from_user.id
    if user_id in chosen_cargo and chosen_cargo[user_id]:
        chosen_cargo_ids = chosen_cargo[user_id]  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≥—Ä—É–∑–æ–≤

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ç–æ–ª–±–µ—Ü "–ì—Ä—É–∑ –∏ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞"
        for cargo_id in chosen_cargo_ids:
            add_chosen_cargo(user_id, cargo_id)

        chosen_cargo[user_id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
        bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è. üöö")
    else:
        bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–∑—ã. üö´")



def add_chosen_cargo(user_id, cargo_id):
    sheet = client.open_by_key(SPREADSHEET_ID_USER_DATA).get_worksheet(0)

    # –ù–∞–π–¥–µ–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ user_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    for idx, row in enumerate(sheet.get_all_values(), start=1):
        if row[0] == str(user_id):
            user_row = idx  # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
            last_cargo_column = len(row)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–∑–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü
            print(cargo_id)
            sheet.update_cell(user_row, last_cargo_column + 1, cargo_id)
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É


def ask_phone(message):
    user_id = message.from_user.id
    driver_data[user_id]["name"] = message.text

    bot.send_message(message.chat.id, "–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω?")
    bot.register_next_step_handler(message, ask_car_number)


def ask_car_number(message):
    user_id = message.from_user.id
    driver_data[user_id]["phone"] = message.text

    bot.send_message(message.chat.id, "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–Ω–∞–∫ –º–∞—à–∏–Ω—ã?")
    bot.register_next_step_handler(message, ask_cargo_capacity)


def ask_cargo_capacity(message):
    user_id = message.from_user.id
    driver_data[user_id]["car_number"] = message.text

    bot.send_message(message.chat.id, "–ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω—ã?")
    bot.register_next_step_handler(message, ask_dimensions)


def ask_dimensions(message):
    user_id = message.from_user.id
    driver_data[user_id]["cargo_capacity"] = message.text

    bot.send_message(message.chat.id, "–î–ª–∏–Ω–∞/–®–∏—Ä–∏–Ω–∞/–í—ã—Å–æ—Ç–∞ –º–∞—à–∏–Ω—ã?")
    bot.register_next_step_handler(message, ask_body_type)


def ask_body_type(message):
    user_id = message.from_user.id
    driver_data[user_id]["dimensions"] = message.text

    bot.send_message(message.chat.id, "–¢–∏–ø –∫—É–∑–æ–≤–∞?")
    bot.register_next_step_handler(message, ask_residence_city)


def ask_residence_city(message):
    user_id = message.from_user.id
    driver_data[user_id]["body_type"] = message.text

    bot.send_message(message.chat.id, "–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è?")
    bot.register_next_step_handler(message, ask_distance_to_travel)


def ask_distance_to_travel(message):
    user_id = message.from_user.id
    driver_data[user_id]["residence_city"] = message.text

    bot.send_message(message.chat.id, "–î–∏—Å—Ç–∞–Ω—Ü–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤—ã –µ–∑–¥–∏—Ç—å? (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)")
    bot.register_next_step_handler(message, ask_employment_type)


def ask_employment_type(message):
    user_id = message.from_user.id
    driver_data[user_id]["distance_to_travel"] = message.text

    bot.send_message(message.chat.id, "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ò–ü –∏–ª–∏ —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º?")
    bot.register_next_step_handler(message, ask_car_ownership)


def ask_car_ownership(message):
    user_id = message.from_user.id
    driver_data[user_id]["employment_type"] = message.text

    bot.send_message(message.chat.id, "–£ –≤–∞—Å –º–∞—à–∏–Ω–∞ –≤ –∞—Ä–µ–Ω–¥–µ –∏–ª–∏ –ª–∏—á–Ω–∞—è?")
    bot.register_next_step_handler(message, save_driver_info)


def save_driver_info(message):
    user_id = message.from_user.id
    driver_data[user_id]["car_ownership"] = message.text

    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏? –ó–∞–¥–Ω–∏–π/–≤–µ—Ä—Ö–Ω–∏–π/–±–æ–∫–æ–≤–æ–π?")
    bot.register_next_step_handler(message, ask_cargo_loading_type)


def ask_cargo_loading_type(message):
    user_id = message.from_user.id
    driver_data[user_id]["cargo_loading_type"] = message.text

    add_driver_to_google_sheets(user_id, **driver_data[user_id])  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–∏—Ç–µ–ª–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


def add_driver_to_google_sheets(user_id, **data):
    sheet = client.open_by_key(SPREADSHEET_ID_USER_DATA).get_worksheet(0)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

    driver_info = [
        user_id,
        "–í–æ–¥–∏—Ç–µ–ª—å",
        data["name"],
        data["phone"],
        data["car_number"],
        data["cargo_capacity"],
        data["dimensions"],
        data["body_type"],
        data["residence_city"],
        data["distance_to_travel"],
        data["employment_type"],
        data["car_ownership"],
        data["cargo_loading_type"]
    ]

    sheet.append_row(driver_info)


@bot.callback_query_handler(func=lambda call: call.data == "cargo")
def handle_cargo(call):
    user_id = call.from_user.id
    user_data[user_id] = {}
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ.\n\n1. –û—Ç–∫—É–¥–∞?")

    bot.register_next_step_handler(call.message, ask_cargo_from)


def ask_cargo_from(message):
    user_id = message.from_user.id
    user_data[user_id]["cargo_from"] = message.text
    bot.send_message(user_id, "2. –ö—É–¥–∞?")
    bot.register_next_step_handler(message, ask_cargo_to)


def ask_cargo_to(message):
    user_id = message.from_user.id
    user_data[user_id]["cargo_to"] = message.text
    bot.send_message(user_id, "3. –î–∏—Å—Ç–∞–Ω—Ü–∏—è (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)?")
    bot.register_next_step_handler(message, ask_cargo_distance)


def ask_cargo_distance(message):
    user_id = message.from_user.id
    user_data[user_id]["cargo_distance"] = message.text
    bot.send_message(user_id, "4. –í–µ—Å –≥—Ä—É–∑–∞ (–≤ –∫–≥)?")
    bot.register_next_step_handler(message, ask_cargo_weight)


def ask_cargo_weight(message):
    user_id = message.from_user.id
    user_data[user_id]["cargo_weight"] = message.text
    bot.send_message(user_id, "5. –û–ø–ª–∞—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö)?")
    bot.register_next_step_handler(message, save_cargo_info)


def save_cargo_info(message):
    user_id = message.from_user.id
    cargo_info = {
        "from_location": user_data[user_id]["cargo_from"],
        "to_location": user_data[user_id]["cargo_to"],
        "distance": user_data[user_id]["cargo_distance"],
        "weight": user_data[user_id]["cargo_weight"],
        "payment": message.text
    }

    add_cargo_to_google_sheets(**cargo_info)
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


def add_cargo_to_google_sheets(from_location, to_location, distance, weight, payment):
    sheet = client.open_by_key(SPREADSHEET_ID_CARGO_DATA).get_worksheet(0)  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
    num_rows = len(sheet.get_all_values()) + 1

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Xcrg", –≥–¥–µ X - –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞
    cargo_id = f"{num_rows - 1}crg"

    cargo_info = [cargo_id, from_location, to_location, distance, weight, payment]
    sheet.append_row(cargo_info)



bot.polling()
